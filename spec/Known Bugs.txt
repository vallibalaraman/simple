Known Bugs:
base.createItem(' ') or base.createItem({dataEtc: {data: ' '}}) etc. will create ids that consist only of spaces
base.createItem is programmed to give up looking for unique id after about 10 trillion attempts. Is this too many or too few?
base.createItem is programmed to limit localIds to 64 chars. Is this too many or too few?
base does not deal with foreignIds (i.e. server ids). Can this be taken care of in dataEtc?
when item.setDataEtc() is passed an array, it accepts it, but maybe this is okay?
items have subscribers and publishers ids each stored twice, once in array and once in object to use hash instead of search. Will size matter?
The following test produces an unexpected id, which is 'faith_9_10'
  describe("when item.addPublisherId is called with an invalid id", function () {
    it("ensures item returns false", function() {
      var item = base.createItem({localId: 'faith', publisherIds: ['hope', 'love']});
      var result = item.addPublisherId([]);
It doesn't seem secure: getItem and getItems?
Need a way to export core?
Right now it does console.log when an id is requested but denied because already used or >64chars. Only user will see that if user opens browser console.
  Better to have a log, perhaps item(s) that both user and server/webmaster can have access to?
Base forces me in presenter to record modelId twice: once in publisherIds and once as model in dataEtc. This leads to unexpected program behavior if one is set to one id and the other to another (i.e. allows programmer more scope for error). Perhaps both publishers and subscribers could be listed with associated keywords. But then why not just give them each their own data area and avoid one module/object interfering with another? Because then how could they talk to one another? I suppose they all need read access, but only write access where they themselves created the keyword within dataEtc.
On a related topic, when a change occurs, all subscribers are updated, making debugging difficult if there are many subscribers? Better to have them subscribe to certain "topics"? (though some may need all changes--eg. undo log)? As in pubsubjs?
On a related topic, it notifies for EVERY change. I guess that's good for logging, but sometimes I wish we could stipulate suppressMostPublishing or require manual publish() for most publishing, i.e. that which is not important for undo, etc.
body parts are defined as 'part of the body'
