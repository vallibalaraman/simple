Pseudocode for client of simplifier program

ITEM INTERFACE
+getLocalId():String
+getDataEtc():Object
+setDataEtc(dataEtc:Object):Boolean
+checkSubscriberId(subscriberId:String):Booleanish Number
+checkPublisherId(publisherId:String):Booleanish Number
+addSubscriberId(subscriberId:String, priority:Number):Boolean
+removeSubscriberId(subscriberId:String):Boolean
+addPublisherId(publisherId:String):Boolean
+removePublisherId(publisherId:String):Boolean
+update(publisherId:String):Boolean
+getUpdateFunction():Function
+setUpdateFunction(update:Function):Boolean
ITEM MANAGER INTERFACE
+createItem(core:Object):Item
+deleteItem(item:Item):Boolean
+getItem(localId):Item
+setItem(item:Item):Boolean
ITEM CORE INTERFACE
localId:String
DataEtc:Object
DataEtc.data
DataEtc.dataType:String
SubscriberIds:Array<String>
PublisherIds:Array<String>
Update:Function(publisherId:String):Boolean
ACCEPTED DATE: 6 MARCH 2013


//+createItem(core:Object):Item
//check given core for localId
  //if core.localId, 
    //check that it is valid
      //if not string, to string
      //if > 64, chop it off there
    //check if localId is used
      //if used, modify, saving originalLocalId in dataEtc.
        //chop make max 62 to allow for underscore and number
        //add underscore and increasing numbers until unused id is found
        //every time mod10 is 0, chop off a letter from the 64 max?
  //if no core.localId, check for dataEtc.data
    //if none, not a true core
      //convert to string
      //if no string, create date+time string
      //create core
      //put string in dataEtc.data
  //use dataEtc.data to create localId
    //accept first 15 letters (enough for date string)
    //then, if space, see if used
      //if not, add more letters (not ending with space until unused id is found
        //if up to 33(enough for time string), add underscore and number
//+getLocalId():String
//+getDataEtc():Object
//+setDataEtc(dataEtc:Object):Boolean
//send this to the update functions of subscribers
  //if subscriber does not exist, console.log warning
  //if unchecked publishers still do not exist, console.log warning
  //if unchecked publishers now exist but do not have this listed as subscriber, console.log warning and subscribe
  //delete unchecked publishers list
//create private subscribers and publishers arrays and also indices for easy lookup?
//check for subscribers
  //if subscribers, check that typeof each === string
    //if not, throw exception
//check for publishers
  //if subscribers, check that typeof each === string
    //if not, throw exception
  //check if publishers have this listed as subscriber
    //if not, console.log warning and subscribe
    //if publishers do not exist, keep a list of unchecked publishers
//+checkSubscriber(subscriberId:String):Boolean
//+checkPublisher(publisherId:String):Boolean
//+addSubscriberId(subscriberId:String, priority:Number):Boolean
  //no immediate update because may cause unwanted behavior, and they just looked at us
  //somewhere publisher needs to be added--here or elsewhere?
//+removeSubscriberId(subscriberId:String):Boolean
  //somewhere publisher needs to be removed--here or elsewhere?
//+addPublisherId(publisherId:String):Boolean
//+removePublisherId(publisherId:String):Boolean
//inner update function should be in core
//check if it's already there
  //if so, ensure typeof === function or some such check, otherwise throw exception
//+update(publisher:Item):Boolean (this is where others update this; for this updating others, see setDataEtc.)
//outer update function
  //if this did not already have publisher listed, 
    //console.log warning
    //add publisher
  //if unchecked publishers still do not exist, console.log warning
  //if unchecked publishers now exist but do not have this listed as subscriber, console.log warning and subscribe
  //delete unchecked publishers list
  //run supplied core update function
//+getUpdateFunction():Function
//+setUpdateFunction(update:Function):Boolean
  //ensure typeof === function or some such check, otherwise return boolean
//+deleteItem(item:Item):Boolean
  //I think setting value to null will be sufficient
//+getItem(localId):Item (
  //no false needed in interface def, as long as it returns something falsey
//+setItem(item:Item):Boolean
  //if no item.getId, throw exception

  Vertex interface
+getId():String
+setId(id:String)
+getDataEtc():Object
+setDataEtc(dataEtc:Object)
+getSubscribers():Array
+getPublishers():Array
+createVertex(core:Object):Vertex
+addSubscriber(vertex:Vertex, priority:Number)
+removeSubscriber(vertex:Vertex)
+update(publisher:Vertex)
+beDeleted()
ACCEPTED DATE: 5 MARCH 2013

BELOW THIS IS OLD, MUCH MAY BE DELETED
  
  
do Vertex constructor
check core, possibly supply defaults
core should be something like...
{
  id: 'Step_1_Import_Text", 
  dataEtc :
  {
    dataType: 'text',
    data: 'Step 1: Import Text',
    created: '5 Mar 2013',
    upPoints: '1',
    downPoints: '0'
  }
  subscribers: 
  [
    idX,
    idY,
    idZ
  ]
  publishers: 
  [
    idV,
    idW,
    idX
  ]
  //update: ?
}

//Req. 4.2: Steps on every virtual page
//Create Steps tool model (at first with title and orientation), 
//Create Steps tool views (one for invisible tool container, one for title to be used if title data exists)
//Create Steps tool presenter



//Connect them via subscription
//Changing model data to active to display (with first but finally without title)
//Try separating presenter from its functions, for reuse
//Create Step1 model
//Create Step1 view, if not reusing
//Create Step1 presenter, try to reuse functions
//Connect them together to display
//Create Step2 model
//Create Step2 view, if not reusing
//Create Step2 presenter, try to reuse functions
//Connect them together to display (and ensure switching steps changes state via console.log)
//Create Step3 model
//Create Step3 view, if not reusing
//Create Step3 presenter, try to reuse functions
//Connect them together to display
//Create 1.1 Import Method tool model
//Create 1.1 Import Method view, if not reusing
//Create 1.1 Import Method presenter, try to reuse functions
//Connect them together to display
//Create textarea button model
//Create textarea button view
//Create textarea button presenter
//Connect it with tool/title and Step1 to display (and ensure clicking other steps makes 1.1 disappear)
//If time, try dev mode 0.1 by looping through allVertices and displaying a crud interface
//Then move on to completing importer, analyzer (chunking), checker(comparison with simplicity standard), rechecker (manual), exporter

//algorithm for list:
//record time in processedWordList
//split by new lines
//split by seperators
//in each line:
//  convert first into id in core
//    but if parentheses, create a quick item that says variantOf: 
//  stem? or do that lazily?
//  second: use as key for new object
//  in new object, state level as 3
//  remainder of line are "extra" synonyms--for use when this turns up as a synonym
//  save core with others in processedWordList for human checking
//  createItem
//record ending time in processedWordList

//break up user text
//find index of first alphabetical character
//if at beginning (0), disregard index, else split and take first as non-word
//for every non-word, add to current sentence
//for every word, check first letter and remember whether capitalized or not
//also check for the word in simple list
//consider stemming, affixes, etc.
//if not, add it as key in dataEtc.hardWords, if not already, and push next sentence id to value array
//for every non-word, keep track of first char, last (and length?)
//if last word was not cap (i.e. avoid "Mr. X"), last non word started with sentence-ending punctuation and ended with space, and next word starts with cap
//then finalize the sentence, save it with next numbered id

updateFrom: function updateFromForHardWordsPresenter(publisher) {
        //if publisher is Hard Words tool model, get hard words and turn them into an array for displaying
          //(before they were in object for lookup by the word itself when encountered in the text, but present view prefers numbers)
          //if isDisplayable and not isDisplayed, give them to view utility one by one and set isDisplayed to true
        //if publisher is Vocab Level tool model, check if hardWordsArray length indicates Hard Words tool model has processed
          //if so and isDisplayed is false, give hard words to view utility one by one and set isDisplayed to true
          //regardless, set isDisplayable to true, probably
        //if update is run by view markup, it has set selectedIndex here, so fetch and set selectedWord in model for future observers
        
        
//affixes, derivational (from Specialized English) (not yet added to the simplifier word list(s))
//if it starts with one of the following prefixes, cut that off and check the rest; let user see both the prefix meaning and the other meaning
  //anti- - against, opposed to (anti-government)
  //dis- - not (dishonest, disobey)
  //pro- - for, supporting (pro-government)
  //re- - to do again (reorganize, reunite)
  //self- - acted upon /by self (self-declared, self-appointed)
  //un- - not (unusual, unhappy)
//If it ends with one of the following suffixes, cut that off and check the rest; let user see both the prefix meaning and the other meaning
    //These four may be added to a word to mean “the person or thing that does the action suggested by the word”-
  //-ist - (art >artist), -er - (paint > painter), -or - (act > actor), -ant - (serve > servant)
    //These five can change a verb into a noun closely related to the verb-
  //-ment - (agree > agreement), -age - (marry > marriage), -tion - (protect > protection), -sion - (invade > invasion), -ing - (I like to read > I enjoy reading. A noun that uses -ing in this way is called a gerund.)
    //These suffixes can change some nouns into adjectives-
  //-ful - (care > careful),-al - (tradition > traditional)
    //These suffixes can change some verbs to adjectives-
  // -ive - (protect > protective), -ing - (save > saving)
    //And this one can change some adjectives into nouns-
  //-ness- (willing > willingness)


Req 1.1
Create Item 1.1 Importing Method


Create Item 1.2 The text to simplify


Create Item 2.1 Vocab Goal


Create Item 2.2 Result Type"



Create Item 2.3 Hard Word

//Worker analyzer.js sends a sentence's worth: its textArray, its number, and its hardWords with some of their info.
//Some info, not all, because it is doing one sentence at a time, and a hard word may be in multiple sentences.
//Therefore for each hardWord.sentenceInfo we must add the current sentence number as a key with its object of hardIndices and parts of speech
//Later other keys (i.e. indices and sub-indices for other sentences) may be added to hardWord.sentenceInfo

Create Item 2.4 Sentence


Create Item 2.5 Part of Speech


//Create Item 2.6 Replacement
//Change title to "2.6 Replacement (Level, P.o.S.)" to function as column headings



//When user clicks on a part-of-speech, use that to replace the existing part-of-speech for that word

//Req. 2.6.1.2, Req. 2.6.2 Copy the selected word, but not pos/level into the text field
//Req. 2.6.2.1 Use the selected word to populate the replacement field for the hardWord-sentence combo

//Loop through the words in the sentence (if hard, using replacements where they exist), and use them to create an output sentence.
//Also, if user changes whole sentence, save it as an output sentence, but don't add it to checked category; Check it for hard words and add those to unchecked.
//For Output, loop through sentences, and for each, check for a parallel output sentence
//Place a "default for [hardWordX]" checkbox next to the text field
//Req. 2.6.3.1 Keep a default field for each hard word (with sentences and suggestions), and check it before using replacement

//Add original word with level as (last?) replacement suggestion.
//for each suggested word, get level.
//sort suggested words by (in increasing priority): level, PoS, default
//When part-of-speech is known, use that to order the suggestions
//Use level to order the suggestions within part-of-speech (PoS has priority over level, so do level first)

//Req. 2.2 in each level container, keep four containers of hard words: uncheckedHighRisk, uncheckedLowRisk, checkedSuccesses, checkedExceptions
//Req. 2.1, Req. 2.2 the collection of four containers referenced in Type will be only one of the fours/levels/collections referenced in Level
//Req. 2.2, Req. 2.3 the container of hard words referenced in hard words tool will be only one of the containers referenced in Type
//Req. 2.3, Req. 2.4 the sentence referenced in sentence will be only one of the sentences referenced in hard words

//level object can keep a collection of hard word collections for each level, with lower levels only including what's not in higher levels
//level object can keep a record of selected levels (lower level selection implies higher level also selected)
//type object can keep a reference to the selected level(s)
//hard words object can 



2.4
DESIGNING INSTANCE/SENTENCE
MODEL
//if change from hard words tool
  //save for presenter and observers to use
PRESENTER
//if any clicked
  //record in model for replace etc. to use
//if change in model sentences but not hardword+type
  //tack them on
//if change in model hardword+type
  //delete old and create new, if any
  //find new selected type and word, and use them to find new set of sentence ids in data
  //for each sentence id, display the sentence
  //if it's unapproved, use old sentence
  //if it's approved, use new sentence if availab
  
This is awful
I can't make sentence work, starting to panic, but can trust God
what if in msg when I get hard word, just add it to data, notify instance to pick it up
instance can find out selected hard word and type, look up sentenceIds in data, loop through sentences, and display them.
  //this presenter was notified because of some change in model
  //clear display of previous results
  //get selected type
  //get selected hard word
  //find sentence ids for hard word in type
  //find text array indices for each sentence
  //find sentence text arrays for ids
  //loop through sentences
  //for each sentence, loop based on text array indices
  //within each sentence, loop through words
  //apply default changes to each word
  //apply replacements particular to this instance
  //add ** around the hard word in focus
  //join sentence
  //display sentence
  
  
2.6
DESIGNING REPLACEMENT:
MODEL
//on receving a sentence-batch of hard words if the hard word does not have suggestions saved 7 secs after trying
  //ajaxing for suggestions
//on receiving suggestions
  //ordering suggestions esp by vocab size
  //creating extra suggestions: 
    //original word
    //default (previous usage or approved similar)
    //inflected suggestions
    //user entered words?
//on hard word change AND on sentence change AND on type change
  //saving appropriate info for presenter (e.g. replacement for field)
  //saving appropriate info for Results
//on receiving no suggestions
  // no network notice
//on receiving empty suggestions
  //saving state so presenter can put no help from db notice
PRESENTER
//on field change
  //saving to model
//on click
  //saving to model
//on check
  //saving to model
//on model suggestions/no suggestions/empty suggestions
  //changing display list



Create Item 2.7 Result

//make sure when replacement is made it is saved in hard word-sentence-replacement
//when approve and default is clicked, move the whole hard word out of unchecked; if hard word is accepted, move all to ignored; 
  //if approve and change and default, move to both preap and ign, but divide the sentences: 
    //the one checked into simplified (or ignored if it's hard), the others preapproved
  //but if approve and simple and not default, copy hard word into simplified and move sentence only.
  //and if approve and noChange/hard and not default, copy hard word into ignored and move sentence only.
//make sure approve is set according to what the selectedType is
//if change, copy into outputSentences
//turn tool 3.1 into accept: all changes, not unchecked, approved only, with last selected; if no unchecked, turn it into a congrats, same with preapproved
//create 3.2
//get rid of tool 1.1
//create some kind of notice that if you leave it open it will remember your added vocab, if that's true, so you can load second chapter or whatever.


What happens when user approves a sentence?
//goes into modified/output sentences
//output is read, regardless of whether checking approved or unapproved, because in unapproved we want to see the unapproved word next to approved words.
//when user unchecks approve sentence, it's deleted in modified. Probably modified should be an array of version arrays, and we push and pop versions as needed.
//But let's not do that in input, because we want to 
//All else fails, we could apply changes to a sentence and then see if it equals what user approved; if so, continue, but if not, freeze

Let's try again
//create a structure: data.sentences[] each = {textArray: [0: firstFrag...], replace: {index: replacement},
//replace by index because default is by regEx and may make it hard to find replacement by regEx, and doing default last would cause other problems
//if user clicks approve a manually modified sentence, everything after that builds on the manual. If he checks or unchecks, its only for that word.
  //it's too complicated if you try to remember what modifications were made where, and whether the user wants to undo manual but not replacements, etc.
//if user makes change in step 1, data.defaults remain, but data.sentences and type/hardwords is erased, together with dom.
//what about direct changes to list? How is that different than defaults? Defaults are word-pos-replacement maps, eg: difficult-adj-hard; addition means difficult-adj-difficult.


how does this work with reanalysis/rechecking?
//when a user makes any change, whether manual or through the field, the whole sentence should go back to analyzer, 
  //and any new hard words should be displayed, together with the sentence of course if it's in focus, 
  //and any old hard words that are new to this sentence should have this sentence's index added to the hard word object/folder.
  //and any old words that are not new to this sentence should have the new sentence displayed, rather than the old one, but remember old replacements.
    //this means refreshing display (esp sentence) probably, and in sentence/instance tool, recreate sentence from lastest textArray then defaults then replacements
    //if approved replacement is text itself, still include it in replacements, because it may override a default change.
//if user checks or unchecks blank, ignore

This almost makes me tempted to go ahead and highlight one word per sentence,
Why not? I've already done it differently, so time. It would involve adding html tags, and add extra loop when looping for sentences
Why do it? Will it make life more simple? Like if user chooses to accept existing word in one place but not another, I would need to readd the whole sentence and mark that whole sentence as replace[original]:original, which means there would be no effect if he unchecks it, in that case.

Create Item 3.1


Create Item 3.2


Create Item 1.1


//Req. 4.2.2, Req. 4.2.4 If one of the main step buttons are clicked, hide unneeded tools and show needed tools
//Req. 4.2.2 If user goes back to Step 1 and actually changes input, remove all and start completely from scratch
//Req. 4.2.4.1 If user clicks Step 1 and is not already there, hide Step 2 and Step 3 tools and show Step 1 tools.
//Req. 4.2.4.2 If user clicks Step 2 and is not already there, hide Step 1 and Step 3 tools and show Step 2 tools.
//Req. 4.2.4.3 If user clicks Step 3 and is not already there, hide Step 2 and Step 1 tools and show Step 3 tools.